---
title: "Overlapping fishing trips"
author: Einar Hj√∂rleifsson
description: "When confronting the official datacall script 'Remove trip with overlap with another trip' with the Icelandic data it was dropping more trips than expected. Here a little test on synthetic data demonstrates that workflow code can be quite generous in dropping trips. An alternative code flow is explored."
date: "2025-02-27"
categories: [code, ais, fisheries]
---


```{r}
library(tidyverse)
library(data.table)
```

Let's generate a little synthetic dataset where one trip overlaps with a bunch of other trips. In this case we generate a daily trips that all start just past midnight and end around ~10:00. For one trip (trip number 5) we however generate an error were the arrival time is reported one week later than in reality.

```{r}
#| fig-cap: "Sequential trip departure and arrival records, with one trip (trip number 5) with arrival time error."
eflalo_org <- 
  eflalo <-
  tibble(FT_DDATIM = seq(ymd_hms("2024-05-01 00:04:00"),
                       ymd_hms("2024-05-31 00:00:00"), 
                       by = "1 day")) |> 
  mutate(VE_COU = "myland",
         VE_REF = "myship",
         FT_REF = 1:n(),
         FT_LDATIM = FT_DDATIM + dhours(10),
         # Add an overlap
         FT_LDATIM = if_else(FT_REF == 5, FT_DDATIM + dhours(7 * 24), FT_LDATIM))

p <- 
  ggplot(eflalo,
         aes(x = FT_DDATIM, xend = FT_LDATIM,
             y = FT_REF, yend = FT_REF)) +
  theme_grey(base_size = 16) +
  labs(x = "Time", y = "Fishing trip id")
p +
  geom_segment(linewidth = 1, colour = "black")
p <- 
  p +
  geom_segment(linewidth = 1, colour = "red")
```

Confronting this with datacall code we 
```{r}
# 1.3.7 Remove trip with overlap with another trip ---------------------------
# Order 'eflalo' by 'VE_COU', 'VE_REF', 'FT_DDATIM', and 'FT_LDATIM'
eflalo <- doBy::orderBy(~ VE_COU + VE_REF + FT_DDATIM + FT_LDATIM, data = eflalo)
# If a trip (same depart and return times) has more than one FT_REF, make them all into the same (first) FT_REF. 
dt1 <- data.table(eflalo)[,.(VE_REF, FT_REF, FT_DDATIM, FT_LDATIM)]
dt1 <- unique(dt1, by = c("VE_REF", "FT_REF"))
setkey(dt1, VE_REF, FT_DDATIM, FT_LDATIM)
dt2 <- dt1[, ref := .N > 1, by = key(dt1)][ref == T]
dt3 <- dt2[,.(FT_REF_NEW = FT_REF[1]), by = .(VE_REF, FT_DDATIM, FT_LDATIM)]
dt4 <- merge(dt2, dt3)
eflalo2 <- merge(data.table(eflalo), dt4, all.x = T)
eflalo2[!is.na(FT_REF_NEW), FT_REF := FT_REF_NEW]
eflalo2[, FT_REF_NEW := NULL]
eflalo <- data.frame(eflalo2)
eflalo <- eflalo %>% select(-ref)
# Create a data table 'dt1' with the necessary columns from 'eflalo'
dt1 <- data.table(ID = eflalo$VE_REF, FT = eflalo$FT_REF,
                  startdate = eflalo$FT_DDATIM,
                  enddate = eflalo$FT_LDATIM)
# Remove duplicate rows from 'dt1'
dt1 <- dt1[!duplicated(paste(dt1$ID, dt1$FT)), ]
# Set keys for 'dt1' for efficient joining and overlapping
setkey(dt1, ID, startdate, enddate)
# Find overlapping trips in 'dt1'
result <- foverlaps(dt1, dt1, by.x = c("ID", "startdate", "enddate"),
                    by.y = c("ID", "startdate", "enddate"))
# Filter 'result' to get only the rows where trips overlap
overlapping.trips <- subset(result, startdate < i.enddate & enddate > i.startdate & FT != i.FT)
# If there are overlapping trips, remove them from 'eflalo' and save them to a file
if (nrow(overlapping.trips) > 0) {
  eflalo <- eflalo[!eflalo$FT_REF %in% overlapping.trips$FT, ]
} 
p +
  geom_segment(data = eflalo, colour = "darkgreen", linewidth = 1) +
  labs(caption = "Red: Trips removed")
```

Now the above figure indicates that all tows were overlap is detected are removed, even though only one tow is the culprit.

Let's try another way of thinking, here because of my complete lack of the data.table lingo I use the other lingo.

```{r}
#| fig.cap: "Overlap issues using an alternative coding approach"
# One could think about using sequential tests
altverse <- 
  eflalo_org |> 
  group_by(VE_COU, VE_REF) |> 
  mutate(issues = 
           case_when(FT_DDATIM > FT_LDATIM ~ "arrival before departure",
                     FT_DDATIM == FT_LDATIM ~ "arrival same as departure",
                     FT_LDATIM > lead(FT_DDATIM) ~ "next departure before current arrival",
                     lag(FT_LDATIM) > FT_DDATIM ~ "previous arrival after current departure",
                     row_number()==1 ~ "0_first row in a group", 
                     row_number() == max(row_number()) ~ "0_last row in a group",
                     .default = "0_no issues")) |> 
  ungroup()

ggplot(altverse,
       aes(x = FT_DDATIM, xend = FT_LDATIM,
           y = FT_REF, yend = FT_REF,
           colour = issues)) +
  theme_grey(base_size = 16) +
  geom_segment(linewidth = 1) +
  scale_colour_brewer(palette = "Set1") +
  labs(x = "Time", y = "Fishing trip id")
```

Here we have two trips (trip number 5 and 6) that overlap. What to do about overlaps is still a question. One may e.g. remove the first trip and then run the algorithm again. Another approach may be to set the arrival time of the first trip just before departure time of the second trip. It would be nice to get some real case examples to play with to sort of termine what are the most common problems and then try to create a robust algorithm to deal with these. 