---
title: "Spreading money and catches"
format:
  html: default
---

## Preamble

I always thought the trip_assign stuff was a precursor for split-among-pings. Just discovered how completely wrong I was. And the LE_GEAR is only used to assign fishing state but ignored there. Actually, in the split-among-ping it only assumed that you have one gear per trip.

The [{vmstools}-wiki](https://github.com/nielshintzen/vmstools/wiki) has some nice examples regarding how catches an money can be spread across pings. These subsections were particularily useful:

* ... [Distribution of catches / values](https://github.com/nielshintzen/vmstools/wiki/Practicals3#distribution-of-catches--values)
* [Catch distribution](https://github.com/nielshintzen/vmstools/wiki/Practicals4_2021#catch-distribution)

## Some recap runs from the wiki

```{r load}
library(vmstools)
library(data.table)
library(tidyverse)
```

## Data prep
```{r data}
data(eflalo)
data(tacsat)

# Only keep total landings
eflalo$LE_KG  <- rowSums(eflalo[c(grep("KG",colnames(eflalo)))],na.rm=T)
eflalo$LE_EURO  <- rowSums(eflalo[c(grep("EURO",colnames(eflalo)))],na.rm=T)
eflalo <- 
  eflalo |> 
  select(!c(starts_with("LE_KG_"), starts_with("LE_EURO_")))
tacsatp <- 
  mergeEflalo2Tacsat(eflalo,tacsat)
tacsatp$LE_GEAR <- eflalo$LE_GEAR[match(tacsatp$FT_REF,eflalo$FT_REF)]

# subset otter trawl and assign fishing state based on vmstools::activityTacsat
OTB <- subset(tacsatp, LE_GEAR == "OTB" & format(SI_DATIM,format='%Y') == 1801 & !is.na(SI_SP))
storeScheme <- 
  expand.grid(years = unique(format(OTB$SI_DATIM,"%Y")), 
              months = 0,
              weeks = 0,
              analyse.by = unique(OTB[,"LE_GEAR"]))
storeScheme$peaks         <- 5      
storeScheme$fixPeaks      <- FALSE  
storeScheme$sigma0        <- 0.911  
res <- activityTacsat(OTB,units="year",analyse.by="LE_GEAR",storeScheme)
OTB$SI_STATE <- ifelse(res=="f",1,0)
```

```{r}
# distribute catch per trip
OTB_trip <- 
  splitAmongPings(
    tacsat = OTB,
    eflalo = subset(eflalo,LE_GEAR == "OTB" & substring(LE_CDAT,7) == "1801"),
    variable = "all",
    level = "trip",
    conserve = FALSE)
# Expect all fishing pings within a trip to have the same catch values
OTB_trip |> 
  select(VE_COU, VE_REF, FT_REF, LE_GEAR, LE_KG) |> 
  distinct() |> 
  group_by(FT_REF) |> 
  mutate(n = n()) |> 
  arrange(desc(n), FT_REF)
```

```{r}
# distribute catch per day
OTB_day <- 
  splitAmongPings(
    tacsat = OTB,
    eflalo = subset(eflalo, LE_GEAR == "OTB" & substring(LE_CDAT, 7) == "1801"),
    variable = "all",
    level = "day")
# distribute catch per ICESrectangle
OTB_rect <- 
  splitAmongPings(
    tacsat = OTB,
    eflalo = subset(eflalo, LE_GEAR == "OTB" & substring(LE_CDAT, 7) == "1801"),
    variable = "all",
    level = "ICESrectangle")
```

# A single trip

```{r}
OTB |> 
  as_tibble() |> 
  filter(SI_STATE == 1) |> 
  mutate(ir = ramb::rb_d2ir(SI_LONG, SI_LATI)) |> 
  group_by(FT_REF) |> 
  summarise(n = n(),
            days = n_distinct(yday(SI_DATIM)),
            ir = n_distinct(ir),
            d = n_distinct(yday(SI_DATIM), ir)) |> 
  filter(ir > 1 & days > 1) |> 
  arrange(desc(d))

OTB |> 
  as_tibble() |> 
  mutate(ir = ramb::rb_d2ir(SI_LONG, SI_LATI),
         yday = yday(SI_DATIM)) |> 
  select(VE_REF, FT_REF, yday, ir) |> 
  distinct() |> 
  group_by(FT_REF) |> 
  mutate(n = n()) |> 
  ungroup() |> 
  arrange(-n)
```

```{r}
lh <- function(d, org) {
  
  org <- 
    org |> 
    filter(FT_REF %in% unique(d$FT_REF)) #|> 
    # mutate(yday = yday(SI_DATE))
  d |> 
    mutate(lon = ramb::rb_grade(SI_LONG, dx = 1),
           lat = ramb::rb_grade(SI_LATI, dx = 0.5),
           kg = factor(round(LE_KG, 1)),
           yday = yday(SI_DATE)) |> 
    ggplot() +
    theme_bw() +
    geom_point(aes(SI_LONG, SI_LATI, colour = kg),
               size = 5, alpha = 0.75) +
    geom_path(data = org,
               aes(SI_LONG, SI_LATI),
              colour = "grey") +
    geom_point(data = org,
               aes(SI_LONG, SI_LATI, shape = factor(SI_STATE))) +
    # coord_quickmap() +
    scale_colour_brewer(palette = "Set1") +
    scale_x_continuous(breaks = seq(-30, 30, by = 1)) +
    scale_y_continuous(breaks = seq(30, 70, by = 0.5))
}
```


```{r}
TRIP <- "309130"
TRIP <- "296301"
TRIP <- "296301"
TRIP <- "310265"
OTB_trip |> 
  filter(FT_REF == TRIP) |> 
  lh(OTB) +
  facet_wrap(~ yday)
OTB_day |> 
  filter(FT_REF == TRIP) |> 
  lh(OTB) +
  facet_wrap(~ yday)
OTB_rect |> 
  filter(FT_REF == TRIP) |> 
  lh(OTB) +
  facet_wrap(~ yday)
```




# Introduction

This document demonstrates, with **code, tables, and graphics**, how to use the actual `splitAmongPings` function to distribute logbook (eflalo) catch data across VMS (tacsat) pings for a **single vessel and trip**. 

The objective is to assign the total catch from the logbook to individual VMS pings, **weighted by the time interval between pings**, and to illustrate the results both **tabularly and graphically**.

---

# Prerequisites

You need the `vmstools` package available from [https://github.com/nielshintzen/vmstools](https://github.com/nielshintzen/vmstools) and its dependencies installed.  
You may need to install from GitHub:

```{r}
# Uncomment if vmstools is not installed
# remotes::install_github("nielshintzen/vmstools")
library(vmstools)
library(dplyr)
library(ggplot2)
library(tidyr)
```

---

# Example Data

We simulate a scenario where:

- A single vessel ("V001") reports a trip in the logbook with a total catch of 600 kg.
- The vessel's VMS records 6 fishing pings during this trip, each with a timestamp, ICES rectangle, and a time interval (in hours) representing how long that ping covers.

## Logbook (eflalo) Data

```{r}
eflalo <- data.frame(
  VE_REF = "V001",
  FT_REF = 101,
  FT_DDAT = "01/09/2025",
  FT_DTIME = "06:00",
  FT_LDAT = "02/09/2025",
  FT_LTIME = "18:00",
  LE_CDAT = "01/09/2025",
  LE_RECT = "32F1",
  LE_KG = 600,
  LE_EURO = 1200
)
```

## VMS (tacsat) Data

```{r}
tacsat <- data.frame(
  VE_REF   = rep("V001", 6),
  FT_REF   = rep(101, 6),
  SI_DATE  = c("01/09/2025", "01/09/2025", "01/09/2025", "01/09/2025", "02/09/2025", "02/09/2025"),
  SI_TIME  = c("08:00", "10:00", "14:00", "18:00", "08:00", "14:00"),
  LE_RECT  = c("32F1", "32F1", "32F2", "32F2", "32F2", "32F1"),
  SI_STATE = rep(1, 6),
  INTV     = c(2, 4, 4, 6, 6, 4)
)
```

---

# Data Preparation

Before using `splitAmongPings`, we need to ensure the date/time columns are in the required formats and that all required columns are present.

```{r}
# Merge date and time columns for tacsat
tacsat$SI_DATIM <- as.POSIXct(
  paste(tacsat$SI_DATE, tacsat$SI_TIME),
  format="%d/%m/%Y %H:%M", tz="UTC"
)
# For eflalo, FT_DDATIM and FT_LDATIM are constructed by splitAmongPings if missing.
```

---

# Run splitAmongPings

We will use the interval column (`INTV`) to weight the split, and request all catch variables.

```{r}
result <- splitAmongPings(
  tacsat = tacsat,
  eflalo = eflalo,
  variable = "all",
  level = c("day", "ICESrectangle", "trip"),
  conserve = TRUE,
  by = "INTV",
  returnAll = TRUE
)
```

---

# Tabular Output

```{r}
knitr::kable(
  result[, c("VE_REF", "FT_REF", "SI_DATIM", "LE_RECT", "SI_STATE", "INTV", grep("KG|EURO", names(result), value=TRUE))],
  caption = "Catch and value assigned to each VMS ping (weighted by INTV)"
)
```

---

# Graphical Output

```{r}
# Find the assigned catch column(s)
kg_col <- grep("KG", names(result), value=TRUE)[1]
result$Assigned_KG <- result[[kg_col]]

ggplot(result, aes(x = SI_DATIM, y = Assigned_KG, fill = LE_RECT, width = INTV * 1800)) +
  geom_col(color = "black") +
  scale_x_datetime(date_labels = "%b %d\n%H:%M") +
  labs(
    title = "Catch Split Among VMS Pings (Weighted by Interval)",
    x = "Ping Time",
    y = "Assigned Catch (kg)",
    fill = "ICES Rectangle"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

---

# Interpretation

- **Bars** represent VMS pings, colored by ICES rectangle.
- **Bar height**: Amount of catch assigned (kg).
- **Bar width**: Time interval (in hours) that the ping covers.
- **Sum of all assigned catches equals the logbook total (600 kg).**

This approach allows fine-scale spatial and temporal allocation of logbook catch data using VMS pings, which is essential for spatial analyses and fisheries management.

---